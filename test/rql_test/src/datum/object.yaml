desc: Tests conversion to and from the RQL object type
tests:
    - py: r.expr({})
      js: ['r({})', 'r.expr({})']
      rb: r({})
      ot: ({})
    - py:
        cd: r.expr({'a':1})
        ot: "{'a':1}"
      js:
        cd: r({a:1})
        ot: "({a:1})"
      rb:
        cd: "r({'a'=>1})"
        ot: "{'a'=>1}"
    - py:
        cd: "r.expr({'a':1, 'b':'two', 'c':True})"
        ot: "{'a':1, 'b':'two', 'c':True}"
      js:
        cd: "r({a: 1, b: 'two', c: true})"
        ot: "({a: 1, b: 'two', c: true})"
      rb:
        cd: "r({'a' => 1, 'b' => 'two', 'c' => true})"
        ot: "{'a' => 1, 'b' => 'two', 'c' => true}"


    # Nested expressions
    - cd: r.expr({'a':r.expr(1)})
      ot: ({'a':1})

    - cd: r.expr({'a':{'b':[{'c':2}, 'a', 4]}})
      ot: ({'a':{'b':[{'c':2}, 'a', 4]}})

    - cd: r.expr({'a':1}).type_of()
      ot: "'OBJECT'"

    # test coercions
    - cd: r.expr({'a':1}).coerce_to('string')
      rb: [] # The ruby test driver can't parse the expected value
      ot: ('{"a":1}')

    - cd: r.expr({'a':1}).coerce_to('object')
      ot: ({'a':1})

    - cd: r.expr({'a':1}).coerce_to('array')
      ot: [['a',1]]

    # Error cases
    - cd: r.expr({12:'a'})
      js: r.expr({12:'a'})
      ot:
        cd: err_regex("ReqlDriverError", "Object keys must be strings.*")
        js: [] # our auto-translation is killing this #4653

    - cd: r.expr({'a':{12:'b'}})
      js: r.expr({'a':{12:'b'}})
      ot:
        cd: err_regex("ReqlDriverError", "Object keys must be strings.*")
        js: [] # our auto-translation is killing this #4653

    - js: r({'a':undefined})
      ot: err("ReqlDriverError", "Object field 'a' may not be undefined")

    - js: r({'a':{'b':undefined}})
      ot: err("ReqlDriverError", "Object field 'b' may not be undefined")

    - cd: r.expr({}, "foo")
      ot:
        cd: err("ReqlDriverError", "Second argument to `r.expr` must be a number.")
        js: err("ReqlDriverError", "Second argument to `r.expr` must be a number or undefined.")

    - js: r.expr({}, NaN)
      ot: err("ReqlDriverError", "Second argument to `r.expr` must be a number or undefined.")

    # r.object
    - cd: r.object()
      ot: ({})

    - cd: r.object('a', 1, 'b', 2)
      ot: ({'a':1,'b':2})

    - cd: r.object('c'+'d', 3)
      ot: ({'cd':3})

    - cd: r.object('o','d','d')
      ot: err("ReqlQueryLogicError", "OBJECT expects an even number of arguments (but found 3).", [])

    - cd: r.object(1, 1)
      ot: err("ReqlQueryLogicError","Expected type STRING but found NUMBER.",[])

    - cd: r.object('e', 4, 'e', 5)
      ot: err("ReqlQueryLogicError","Duplicate key `e` in object.  (got `4` and `5` as values)",[])

    - cd: r.object('g', r.db('test'))
      ot: err("ReqlQueryLogicError","Expected type DATUM but found DATABASE:",[])
